name: deploy lff back
on: [push]
env:
  IMAGE: backend
  VERSION: 0.0.1
jobs:
  create-folder:
    name: create folder
    runs-on: ubuntu-latest
    steps:
    - name: execute commands
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        port: 22
        script: |
          mkdir /opt/applications/lff/${{env.IMAGE}}
          ls -al //opt/applications/lff
  generate-image:
    name: generate image
    runs-on: ubuntu-latest
    needs: ['create-folder']
    steps:
      - name: cloner le repertoire
        uses: actions/checkout@master
      - name: setup java version
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '17'
       # Accorder les permissions d'exÃ©cution au fichier mvnw
      - name: Give execute permission to mvnw
        run: chmod +x ./mvnw
      - name: Generation et push image
        run: |
          ./mvnw clean package spring-boot:build-image \
          -Ddocker.publishRegistry.username=${{secrets.DCK_USERNAME}} \
          -Ddocker.publishRegistry.password=${{secrets.DCK_PASSWORD}} \
          -Dspring-boot.build-image.publish=true \
          -Dmaven.test.skip=true
  run-container:
    name: run container
    runs-on: ubuntu-latest
    needs: ['create-folder','generate-image']
    steps:
      - name: cloner le repertoire
        uses: actions/checkout@master
      - name: copy file via ssh key
        uses: appleboy/scp-action@v0.1.7
        with:
            host: ${{ secrets.HOST }}
            username: ${{ secrets.USERNAME }}
            key: ${{ secrets.PRIVATE_KEY }}
            port: 22
            source: "compose.yml"
            target: /opt/applications/lff/${{env.IMAGE}}
      - name: execute commands
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          script: |
            echo DB_URL="${{ secrets.DB_HOST }}" > /opt/applications/lff/${{env.IMAGE}}/.env
            echo DB_USERNAME="${{ secrets.DB_USERNAME }}" >> /opt/applications/lff/${{env.IMAGE}}/.env
            echo DB_PASSWORD="${{ secrets.DB_PASSWORD }}" >> /opt/applications/lff/${{env.IMAGE}}/.env
            docker-compose -f /opt/applications/lff/${{env.IMAGE}}/compose.yml up -d
# rm /opt/applications/lff/${{env.IMAGE}}/.env 